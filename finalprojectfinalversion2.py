# -*- coding: utf-8 -*-
"""FinalProjectFINALVERSION2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d1XU25Ku2oO7z4t4nzFQ0WKCE4e49xLu
"""

# I scraped from basketball-reference.com
# the data is accurate and has lots of data points and statistics
# the data is in tabular form, which makes it easy to scrape and is fairly clean
import requests
url_pergame = 'https://www.basketball-reference.com/leagues/NBA_stats_per_game.html'
response_pergame = requests.get(url_pergame)

### REGULAR EXPRESSIONS ###

import re
import pandas as pd
from bs4 import BeautifulSoup

soup_pergame = BeautifulSoup(response_pergame.text, 'html.parser')
nba_points_pergame = soup_pergame.find(name='table', attrs = {'id':'stats'})

# Extract data using regular expressions
season_pattern = re.compile(r'(\d{4}-\d{2})')
ppg_pattern = re.compile(r'(\d+\.\d+)')
fga_pattern = re.compile(r'(\d+\.\d+)')

totals_pg = []

for row in soup_pergame.find_all('tr')[1:]:
    nba_pergame = {}

    season_element = row.find('td', {'data-stat': 'season'})
    ppg_element = row.find('td', {'data-stat': 'pts_per_g'})
    fga_element = row.find('td', {'data-stat': 'fga_per_g'})

    # Check if the elements are found before accessing the text attribute
    if season_element:
        season_text = season_element.text
        match_season = re.search(season_pattern, season_text)

        if match_season:
            nba_pergame['Season'] = match_season.group(0)

    if ppg_element:
        ppg_text = ppg_element.text
        match_ppg = re.search(ppg_pattern, ppg_text)

        if match_ppg:
            nba_pergame['PPG'] = match_ppg.group(0)

    if fga_element:
        fga_text = fga_element.text
        match_fga = re.search(fga_pattern, fga_text)

        if match_fga:
            nba_pergame['FGA'] = match_fga.group(0)

    totals_pg.append(nba_pergame)

df_pg_test = pd.DataFrame(totals_pg)

from bs4 import BeautifulSoup
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.subplots as sp
import plotly.graph_objects as go

soup_pergame = BeautifulSoup(response_pergame.text, 'html.parser')
nba_points_pergame = soup_pergame.find(name='table', attrs = {'id':'stats'})
totals_pg = []
for row in nba_points_pergame.find_all('tr')[1:]:
    nba_pergame = {}
    season_element = row.find('td', {'data-stat': 'season'})
    points_element = row.find('td', {'data-stat': 'pts_per_g'})
    fga_element = row.find('td',{'data-stat':'fga_per_g'})
    fg_element = row.find('td',{'data-stat':'fg_per_g'})
    fg_pct_element = row.find('td',{'data-stat':'fg_pct'})
    threept_element = row.find('td',{'data-stat':'fg3a_per_g'})
    efg_element = row.find('td',{'data-stat':'efg_pct'})
    threepct_element = row.find('td',{'data-stat':'fg3_pct'})


    # Check if the elements are found before accessing the text attribute
    # Because certain stats are not recorded to did not exist during certain times (ex. 3 pointers) I had to check to see if the elements contained data
    # .text was used to make the data usable -- some columns did not contain data
    if season_element and points_element:
        nba_pergame['Season'] = season_element.text
        nba_pergame['PPG'] = points_element.text
        nba_pergame['Effective FG%'] = efg_element.text
        nba_pergame['Field Goals'] = fg_element.text
        nba_pergame['FGA'] = fga_element.text
        nba_pergame['FG_Percent'] = fg_pct_element.text
        nba_pergame['3 Pointers Attempted'] = threept_element.text
        nba_pergame['3 Point Percentage'] = threepct_element.text
        totals_pg.append(nba_pergame)
# dataframe creation
df_pg = pd.DataFrame(totals_pg)

### SCALED ### Made to use so you can look at all the data in one place/to make the graph meaningful
df_pg_round = df_pg.round(2)
df_pg_round['Season'] = pd.to_numeric(df_pg_round['Season'].str.split('-').str[0]) #set this as the beginning season not in ****-**** format
# Convert 'Points' to numeric
df_pg_round['PPG'] = pd.to_numeric(df_pg_round['PPG'])
df_pg_round['Effective FG%'] = (pd.to_numeric(df_pg_round['Effective FG%'])* 220).round(2)
df_pg_round['Field Goals'] = pd.to_numeric(df_pg_round['Field Goals'])
df_pg_round['3 Pointers Attempted'] = (pd.to_numeric(df_pg_round['3 Pointers Attempted']) * 4).round(2)
df_pg_round['3 Point Percentage'] = (pd.to_numeric(df_pg_round['3 Point Percentage']) * 280).round(2)

### UNSCALED ###
df_pg['Season'] = pd.to_numeric(df_pg['Season'].str.split('-').str[0])  # Extract the starting year of the season
df_pg['PPG'] = pd.to_numeric(df_pg['PPG'])
df_pg['Effective FG%'] = pd.to_numeric(df_pg['Effective FG%'])
df_pg['Field Goals'] = pd.to_numeric(df_pg['Field Goals'])
df_pg['3 Pointers Attempted'] = pd.to_numeric(df_pg['3 Pointers Attempted'])
df_pg['3 Point Percentage'] = pd.to_numeric(df_pg['3 Point Percentage'])
df_pg['FGA'] = pd.to_numeric(df_pg['FGA'])
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#Cleaning data for rule changes:
# Wanted to look at the effects of the rule changes over time
df_pg_reverse = df_pg.iloc[::-1] #Data is reversed because the table is read from present day to 1946 rather than starting in 1946 to today
first_avg = []
second_avg = []
third_avg = []
fourth_avg = []
fifth_avg = []
sixth_avg = []
seventh_avg = []

for index, row in df_pg_reverse.iterrows():
    if row['Season'] < 1953:
        first_avg.append(row['PPG'])
    if row['Season'] <= 1963 and row['Season'] > 1953:
      second_avg.append(row['PPG'])
    elif row['Season'] >= 1964 and row['Season'] <= 1971:
      third_avg.append(row['PPG'])
    elif row['Season'] >= 1972 and row['Season'] <= 1992:
      fourth_avg.append(row['PPG'])
    elif row['Season'] >= 1993 and row['Season'] <= 2004:
      fifth_avg.append(row['PPG'])
    elif row['Season'] >= 2005 and row['Season'] <= 2011:
      sixth_avg.append(row['PPG'])
    elif row['Season'] >= 2012 and row['Season'] <= 2023:
      seventh_avg.append(row['PPG'])
# Calculating averages over periods of time
avg_one = np.mean(first_avg)
avg_two = np.mean(second_avg)
avg_three = np.mean(third_avg)
avg_four = np.mean(fourth_avg)
avg_five = np.mean(fifth_avg)
avg_six = np.mean(sixth_avg)
avg_seven = np.mean(seventh_avg)

### BAR GRAPH ###
categories = ['1946-1953','1954-1963','1964-1971','1972-1992','1993-2004','2005-2011','2012-2023']
values = [avg_one,avg_two,avg_three,avg_four,avg_five,avg_six,avg_seven]
plt.figure(figsize=(10, 6))
plt.bar(categories, values)
plt.xlabel('Seasons')
plt.ylabel('PPG Averages')
plt.title('Rule Changes Affects on PPG')
plt.show()

df_pg.head()

from bs4 import BeautifulSoup
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.subplots as sp
import plotly.graph_objects as go
import plotly.express as px
import plotly.graph_objects as go
import plotly.express as px
import plotly.graph_objects as go

'''INDVIDUAL GRAPHS'''
## SEASON VS. PPG ##
fig1 = px.scatter(df_pg, x='Season', y='PPG', title='NBA Points Per Game Per Season', size_max=100)
fig1.add_trace(go.Scatter(x=df_pg['Season'], y=df_pg['PPG'], mode='lines+markers', name='PPG',))
fig1.update_traces(hoverinfo='text', text=df_pg['PPG'])
fig1.add_vline(x=1953, line_width=2, line_dash="dash", line_color="black")
fig1.add_vline(x=1963, line_width=2, line_dash="dash", line_color="black")
fig1.add_vline(x=1971, line_width=2, line_dash="dash", line_color="black")
fig1.add_vline(x=1991, line_width=2, line_dash="dash", line_color="black")
fig1.add_vline(x=1994, line_width=2, line_dash="dash", line_color="black")
fig1.add_vline(x=2004, line_width=2, line_dash="dash", line_color="black")
fig1.add_vline(x=2008, line_width=2, line_dash="dash", line_color="black")
fig1.add_vline(x=2017, line_width=2, line_dash="dash", line_color="black")
fig1.show()

## SEASON VS. EFFECTIVE FG% ##
fig2 = px.scatter(df_pg, x='Season', y='Effective FG%', title='Effective Field Goal Percentage Per Season', size_max=100)
fig2.add_trace(go.Scatter(x=df_pg['Season'], y=df_pg['Effective FG%'], mode='lines+markers', name='Effective FG%'))
fig2.update_traces(hoverinfo='text', text=df_pg['Effective FG%'])
fig2.add_vline(x=1953, line_width=2, line_dash="dash", line_color="black")
fig2.add_vline(x=1963, line_width=2, line_dash="dash", line_color="black")
fig2.add_vline(x=1971, line_width=2, line_dash="dash", line_color="black")
fig2.add_vline(x=1991, line_width=2, line_dash="dash", line_color="black")
fig2.add_vline(x=1994, line_width=2, line_dash="dash", line_color="black")
fig2.add_vline(x=2004, line_width=2, line_dash="dash", line_color="black")
fig2.add_vline(x=2008, line_width=2, line_dash="dash", line_color="black")
fig2.add_vline(x=2017, line_width=2, line_dash="dash", line_color="black")
fig2.show()

## SEASON VS. 3 POINT PERCENTAGE ##
fig3 = px.scatter(df_pg, x='Season', y='3 Point Percentage', title='3 Point Percentage Per Season', size_max=100)
fig3.add_trace(go.Scatter(x=df_pg['Season'], y=df_pg['3 Point Percentage'], mode='lines+markers', name='3 Point Percentage'))
fig3.update_traces(hoverinfo='text', text=df_pg['3 Point Percentage'])
fig3.add_vline(x=1991, line_width=2, line_dash="dash", line_color="black")
fig3.add_vline(x=1994, line_width=2, line_dash="dash", line_color="black")
fig3.add_vline(x=2004, line_width=2, line_dash="dash", line_color="black")
fig3.add_vline(x=2008, line_width=2, line_dash="dash", line_color="black")
fig3.add_vline(x=2017, line_width=2, line_dash="dash", line_color="black")
fig3.show()

## SEASON VS. 3 POINTERS ATTEMPTED ##
fig4 = px.scatter(df_pg, x='Season', y='3 Pointers Attempted', title='3 Point Attempts Per Season', size_max=100)
fig4.add_trace(go.Scatter(x=df_pg['Season'], y=df_pg['3 Pointers Attempted'], mode='lines+markers', name='3 Pointers Attempted'))
fig4.update_traces(hoverinfo='text', text=df_pg['3 Pointers Attempted'])
fig4.add_vline(x=1991, line_width=2, line_dash="dash", line_color="black")
fig4.add_vline(x=1994, line_width=2, line_dash="dash", line_color="black")
fig4.add_vline(x=2004, line_width=2, line_dash="dash", line_color="black")
fig4.add_vline(x=2008, line_width=2, line_dash="dash", line_color="black")
fig4.add_vline(x=2017, line_width=2, line_dash="dash", line_color="black")
fig4.show()


'''Scaled Graph'''
# Scatter plot
fig = px.scatter(df_pg_round, x='Season', y='Effective FG%', title='NBA Points Per Game Over Seasons', size_max=100)

# Line plot
fig.add_trace(go.Scatter(x=df_pg_round['Season'], y=df_pg_round['Effective FG%'], mode='lines+markers', name='Effective FG%'))

# Hover information
fig.update_traces(hoverinfo='text', text=df_pg_round['Effective FG%'])

# Additional scatter plots with lines to connect them
fig.add_trace(go.Scatter(x=df_pg_round['Season'], y=df_pg_round['PPG'], mode='lines+markers', name='PPG'))
fig.add_trace(go.Scatter(x=df_pg_round['Season'], y=df_pg_round['3 Point Percentage'], mode='lines+markers', name='3 Point Percentage'))
fig.add_trace(go.Scatter(x=df_pg_round['Season'], y=df_pg_round['3 Pointers Attempted'], mode='lines+markers', name='3 Pointers Attempted'))

# Labeling
fig.update_layout(legend_title_text='Traces', legend=dict(x=0, y=1, traceorder='normal', orientation='h'))
fig.update_layout(height=900, width=1500)
fig.add_vline(x=1953, line_width=2, line_dash="dash", line_color="black")
fig.add_trace(go.Scatter(x=[1953],y=[140] ,mode='markers', marker=dict(symbol = 'triangle-up',size=25), hoverinfo='text', text=["24 second shot clock"]))
fig.add_vline(x=1963, line_width=2, line_dash="dash", line_color="black")
fig.add_trace(go.Scatter(x=[1963],y=[140] ,mode='markers', marker=dict(symbol = 'triangle-up',size=25), hoverinfo='text', text=["Lane increased from 12 to 18 feet"]))
fig.add_vline(x=1971, line_width=2, line_dash="dash", line_color="black")
fig.add_trace(go.Scatter(x=[1971],y=[140] ,mode='markers', marker=dict(symbol = 'triangle-up',size=25), hoverinfo='text', text=["Bonus added for non-shooting fouls"]))
fig.add_vline(x=1991, line_width=2, line_dash="dash", line_color="black")
fig.add_trace(go.Scatter(x=[1991],y=[140] ,mode='markers', marker=dict(symbol = 'triangle-up',size=25), hoverinfo='text', text=["Shot clock only resets if the rim is hit"]))
fig.add_vline(x=1994, line_width=2, line_dash="dash", line_color="black")
fig.add_trace(go.Scatter(x=[1994],y=[140] ,mode='markers', marker=dict(symbol = 'triangle-up',size=25), hoverinfo='text', text=["Hand checking reinstated"]))
fig.add_vline(x=2004, line_width=2, line_dash="dash", line_color="black")
fig.add_trace(go.Scatter(x=[2004],y=[140] ,mode='markers', marker=dict(symbol = 'triangle-up',size=25), hoverinfo='text', text = ["Hand checking removed"]))
fig.add_vline(x=2008, line_width=2, line_dash="dash", line_color="black")
fig.add_trace(go.Scatter(x=[2008],y=[140] ,mode='markers', marker=dict(symbol = 'triangle-up',size=25), hoverinfo='text', text=["Time to advance the ball to half court reduced from 10 to 8 seconds"]))
fig.add_vline(x=2017, line_width=2, line_dash="dash", line_color="black")
fig.add_trace(go.Scatter(x=[2017],y=[140] ,mode='markers', marker=dict(symbol = 'triangle-up',size=25), hoverinfo='text', text=["14 second reset on missed shots"]))
# Show the plot
fig.show()

### CORRELATION COEFFICIENTS TO DETERMINE SIGNIFIGANCE ###

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

condition = df_pg['Season'] >= 2012
selected_df = df_pg[condition]

correlation_matrix = selected_df[['3 Pointers Attempted', '3 Point Percentage', 'Effective FG%', 'PPG']].corr()

# Heatmap
plt.figure(figsize=(10, 2))
sns.heatmap(correlation_matrix[['PPG']].T, annot=True, cmap='coolwarm', vmin=-1, vmax=1, cbar=False)
plt.title('Correlation with PPG Heatmap')
plt.show()
## The redder the stronger the correlation ##